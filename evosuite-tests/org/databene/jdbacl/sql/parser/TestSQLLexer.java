/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.sql.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.Reader;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.MismatchedTokenException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.databene.jdbacl.sql.parser.SQLLexer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestSQLLexer {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRInputStream0);
      SQLLexer.DFA9 sQLLexer_DFA9_0 = sQLLexer0.new DFA9(sQLLexer0);
      String string0 = sQLLexer_DFA9_0.getDescription();
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__118();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__122();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      // Undeclared exception!
      try {
        sQLLexer0.mEQ();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      sQLLexer0.mINVOCATION();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
  }

  @Test
  public void test5()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("yXf");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      sQLLexer0.mDROP_TABLE();
      assertNull(sQLLexer0.getSourceName());
  }

  @Test
  public void test6()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__88();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__84();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream((Reader) null, 243);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRReaderStream0, recognizerSharedState0);
      sQLLexer0.mTABLE_DETAILS();
      assertNull(sQLLexer0.getSourceName());
  }

  @Test
  public void test9()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      sQLLexer0.mCOLUMN_NAME();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
  }

  @Test
  public void test10()  throws Throwable  {
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream((Reader) null, 243);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRReaderStream0, recognizerSharedState0);
      try {
        sQLLexer0.mT__110();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      sQLLexer0.mINDEX_NAME();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
  }

  @Test
  public void test12()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__87();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__114();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      sQLLexer0.mDROP_SEQUENCE();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
  }

  @Test
  public void test15()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      sQLLexer0.mCOMMENT_COLUMN();
      assertEquals(false, sQLLexer0.failed());
  }

  @Test
  public void test16()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__123();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      sQLLexer0.mVALUE_LIST();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
  }

  @Test
  public void test18()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mDEFAULT();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0);
      try {
        sQLLexer0.mNOT();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      try {
        sQLLexer0.mT__101();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("\u0001\u0118");
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, (RecognizerSharedState) null);
      try {
        sQLLexer0.mT__128();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRInputStream0);
      try {
        sQLLexer0.mT__97();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      sQLLexer0.mTABLE_NAME();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
  }

  @Test
  public void test24()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0);
      sQLLexer0.mNAME_LIST();
      assertEquals(0, sQLLexer0.getCharIndex());
  }

  @Test
  public void test25()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      sQLLexer0.mCOMMENT_TABLE();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
  }

  @Test
  public void test26()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      // Undeclared exception!
      try {
        sQLLexer0.mT__126();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mBYTE();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      sQLLexer0.mCOLUMN_SPEC();
      assertEquals(false, sQLLexer0.failed());
  }

  @Test
  public void test29()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0);
      try {
        sQLLexer0.mGT();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      sQLLexer0.mCREATE_SEQUENCE();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
  }

  @Test
  public void test31()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("6C");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      try {
        sQLLexer0.mT__104();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("\u0001\u0118");
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, (RecognizerSharedState) null);
      sQLLexer0.mCREATE_INDEX();
      assertEquals(0, sQLLexer0.getCharIndex());
  }

  @Test
  public void test33()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      // Undeclared exception!
      try {
        sQLLexer0.mT__117();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      // Undeclared exception!
      try {
        sQLLexer0.mT__112();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mSUB();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test36()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      sQLLexer0.mORA_CONFIGS();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
  }

  @Test
  public void test37()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      sQLLexer0.mARGUMENTS();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
  }

  @Test
  public void test38()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      sQLLexer0.mALTER_TABLE();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
  }

  @Test
  public void test39()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__136();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test40()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      try {
        sQLLexer0.mSLASH();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test41()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mVARCHAR2();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test42()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__113();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test43()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRInputStream0);
      sQLLexer0.mCREATE_TABLE();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
  }

  @Test
  public void test44()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      // Undeclared exception!
      try {
        sQLLexer0.mT__89();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test45()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__107();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test46()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mTIMESTAMP();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test47()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("yXf");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      try {
        sQLLexer0.mOR();
        fail("Expecting exception: MismatchedTokenException");
      } catch(MismatchedTokenException e) {
      }
  }

  @Test
  public void test48()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      // Undeclared exception!
      try {
        sQLLexer0.mT__96();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test49()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("yXf");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      sQLLexer0.nextToken();
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(3, aNTLRStringStream0.index());
  }

  @Test
  public void test50()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRInputStream0, recognizerSharedState0);
      sQLLexer0.nextToken();
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(1, recognizerSharedState0.tokenStartLine);
  }

  @Test
  public void test51()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("(eX8]r?");
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      try {
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: MismatchedSetException");
      } catch(MismatchedSetException e) {
      }
  }

  @Test
  public void test52()  throws Throwable  {
      ANTLRInputStream aNTLRInputStream0 = new ANTLRInputStream();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRInputStream0);
      try {
        sQLLexer0.mINT();
        fail("Expecting exception: EarlyExitException");
      } catch(EarlyExitException e) {
      }
  }

  @Test
  public void test53()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream("6C");
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      sQLLexer0.mINT();
      assertEquals(4, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
  }

  @Test
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[7];
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(charArray0, (-1));
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      try {
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: NoViableAltException");
      } catch(NoViableAltException e) {
      }
  }

  @Test
  public void test55()  throws Throwable  {
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRStringStream0, recognizerSharedState0);
      try {
        sQLLexer0.mWS();
        fail("Expecting exception: MismatchedSetException");
      } catch(MismatchedSetException e) {
      }
  }

  @Test
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, (int) '\"');
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream((Reader) charArrayReader0);
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) aNTLRReaderStream0, recognizerSharedState0);
      try {
        sQLLexer0.mWS();
        fail("Expecting exception: MismatchedSetException");
      } catch(MismatchedSetException e) {
      }
  }
}
