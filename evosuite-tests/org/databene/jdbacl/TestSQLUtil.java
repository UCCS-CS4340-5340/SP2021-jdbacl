/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.hsqldb.rowio.RowOutputBinary;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestSQLUtil {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        SQLUtil.substituteMarkers((String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.leftJoin("}/", stringArray0, "", "}/", stringArray0);
      assertEquals("left join  as }/ on }/.null = }/.null and }/.null = }/.null and }/.null = }/.null and }/.null = }/.null and }/.null = }/.null and }/.null = }/.null and }/.null = }/.null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      assertNotNull(sQLUtil0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setPassword", (DBSchema) null);
      String[] stringArray0 = new String[23];
      String string0 = SQLUtil.renderQuery((DBTable) defaultDBTable0, stringArray0, (Object[]) stringArray0);
      assertEquals("SELECT * FROM setPassword WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("call", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try {
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[5];
      String string0 = SQLUtil.innerJoin("zgfIye;c'ck", stringArray0, (String) null, "renamels+\"=cp5q>xsn", stringArray1);
      assertNotNull(string0);
      assertEquals("null as renamels+\"=cp5q>xsn on zgfIye;c'ck.null = renamels+\"=cp5q>xsn.null", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("call", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , ) REFERENCES null(, , , , , , , )", string0);
      assertNotNull(string0);
      assertEquals("CONSTRAINT call FOREIGN KEY (, , , , , , , ) REFERENCES null(, , , , , , , )", dBForeignKeyConstraint0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        SQLUtil.parseColumnTypeAndSize("M5 (}tsG-Gl");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Illegal column type format: M5 (}tsG-Gl
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("getShort(String)", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getShort(String)", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("getShort(String)", (DBTable) defaultDBTable0, 0, "getShort(String)");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"String\"
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamels+\"=cp5q>xsn", (DBTable) defaultDBTable0, 219, "");
      assertNotNull(defaultDBColumn0);
      
      DBDataType dBDataType0 = defaultDBColumn0.getType();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) defaultDBTable0, dBDataType0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      PrintWriter printWriter0 = new PrintWriter((OutputStream) rowOutputTextLog0, true);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals(53, rowOutputTextLog0.size());
      assertEquals("create table  (\n\trenamels+\"=cp5q>xsn  NULL,\n\t  NULL\n)", rowOutputTextLog0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setPassword", (DBSchema) null);
      String[] stringArray0 = new String[23];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "W:bo&e ?6iX|@", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) rowOutputBinary0);
      PrintWriter printWriter0 = new PrintWriter((OutputStream) dataOutputStream0);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(89, rowOutputBinary0.size());
      assertEquals(89, dataOutputStream0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "execute", true, stringArray0);
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      PrintWriter printWriter0 = new PrintWriter((OutputStream) rowOutputTextLog0, true);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals(48, rowOutputTextLog0.size());
      assertEquals("create table  (,\n\tCONSTRAINT execute UNIQUE ()\n)", rowOutputTextLog0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}/");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "deletecall");
      Integer integer0 = new Integer(90100);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}/", (DBTable) defaultDBTable0, dBDataType0, (Integer) 0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertNotNull(string0);
      assertEquals("}/, }/, }/, }/, }/", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamels+\"=cp5q>xsn", (DBTable) defaultDBTable0, 219, "");
      assertNotNull(defaultDBColumn0);
      
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) defaultDBTable0, "", true, "renamels+\"=cp5q>xsn");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      PrintWriter printWriter0 = new PrintWriter((OutputStream) rowOutputTextLog0, true);
      SQLUtil.renderCreateTable((DBTable) defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals(48, rowOutputTextLog0.size());
      assertEquals("create table  (\n\trenamels+\"=cp5q>xsn  NOT NULL\n)", rowOutputTextLog0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(247, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@m3OGS?S]~z", (DBTable) null, dBDataType0, (Integer) 247);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("(247)", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(247, "");
      Integer integer0 = new Integer((-1));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, (Integer) 247, integer0);
      String string0 = SQLUtil.renderColumn((DBColumn) defaultDBColumn0);
      assertNotNull(string0);
      assertEquals(" (247,-1) NULL", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Object[] objectArray0 = new Object[10];
      objectArray0[5] = (Object) 'g';
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = 'g' AND null = null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized viewradix smallint");
      assertEquals(true, (boolean)boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("ls+o0\"=cp5Q>xsn");
  }

  @Test
  public void test19()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("call");
  }

  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("truncatels+\"=cp5q>xsn");
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intoradix smallint");
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try {
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertNotNull(string0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals(4, stringBuilder0.length());
      assertEquals("null", stringBuilder0.toString());
  }

  @Test
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(">95^Z#");
      SQLUtil.addRequiredCondition(">95^Z#", stringBuilder0);
      assertEquals(17, stringBuilder0.length());
      assertEquals(">95^Z# and >95^Z#", stringBuilder0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      SQLUtil.addOptionalCondition("wmFb4GGckRP", stringBuilder0);
      SQLUtil.addOptionalCondition("wmFb4GGckRP", stringBuilder0);
      assertEquals(26, stringBuilder0.length());
      assertEquals("wmFb4GGckRP or wmFb4GGckRP", stringBuilder0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = SQLUtil.ownerDotComponent((DBObject) defaultDBTable0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(0, "call");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", (DBTable) defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.ownerDotComponent((DBObject) defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("null.call", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setPassword", (DBSchema) null);
      String[] stringArray0 = new String[23];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "W:bo&e ?6iX|@", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder((DBConstraint) dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"W:bo&e ?6iX|@\" PRIMARY KEY (, , , , , , , , , , , , , , , , , , , , , , )", dBPrimaryKeyConstraint0.toString());
      assertNotNull(stringBuilder0);
      assertEquals("CONSTRAINT \"W:bo&e ?6iX|@\" ", stringBuilder0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamels+\"=cp5q>xsn", (DBTable) defaultDBTable0, 219, "");
      assertNotNull(defaultDBColumn0);
      
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) defaultDBTable0, "", true, "renamels+\"=cp5q>xsn");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder((DBConstraint) dBNotNullConstraint0, nameSpec0);
      assertNotNull(stringBuilder0);
      
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "execute", true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals(34, stringBuilder0.capacity());
      assertEquals(31, stringBuilder0.length());
  }

  @Test
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setPassword", (DBSchema) null);
      String[] stringArray0 = new String[23];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "W:bo&e ?6iX|@", false, stringArray0);
      String string0 = SQLUtil.constraintName((DBConstraint) dBPrimaryKeyConstraint0);
      assertNotNull(string0);
      assertEquals("CONSTRAINT \"W:bo&e ?6iX|@\" ", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wmFb4GGckRP");
      String string0 = SQLUtil.typeAndName((DBObject) defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table wmFb4GGckRP", string0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test
  public void test34()  throws Throwable  {
      DBTrigger dBTrigger0 = new DBTrigger((String) null, (DBSchema) null);
      String string0 = SQLUtil.typeAndName((DBObject) dBTrigger0);
      assertNotNull(string0);
      assertEquals("trigger null", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.removeComments("deletels+\"=cp5q>xsn");
      assertEquals("deletels+\"=cp5q>xsn", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("OO@QI;gr<Y86E_'3h*q", false);
      assertEquals("OO @ QI ; gr < Y86E_ '3h*q'", string0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("M5 (}tsG-Gl", true);
      assertEquals("M5 (} tsG - Gl", string0);
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("e,.h?:jLn9k", true);
      assertNotNull(string0);
      assertEquals("e,.h ? : jLn9k", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("rGn*:pkvj", true);
      assertNotNull(string0);
      assertEquals("rGn * : pkvj", string0);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/param", true);
      assertNotNull(string0);
      assertEquals("*/ param", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("ls+o0\"=cp5Q>xsn", false);
      assertEquals("ls + o0 \"=cp5Q>xsn\"", string0);
  }

  @Test
  public void test42()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(22);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer((Reader) pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderColumnListWithTableName(">95^Z#", stringArray0);
      assertEquals(">95^Z#.null, >95^Z#.null, >95^Z#.null, >95^Z#.null, >95^Z#.null, >95^Z#.null, >95^Z#.null", string0);
      assertNotNull(string0);
  }
}
