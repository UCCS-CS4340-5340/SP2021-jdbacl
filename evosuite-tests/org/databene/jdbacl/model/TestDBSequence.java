/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.h2.value.ValueBoolean;
import org.h2.value.ValueLong;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDBSequence {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("Calling commit() in auto-commit mode is not allowed.", (DBSchema) null);
      BigInteger bigInteger0 = dBSequence0.getIncrement();
      dBSequence0.setLastNumber(bigInteger0);
      assertEquals(1, bigInteger0.signum());
  }

  @Test
  public void test1()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("h2.identifiesToUper", "h2.identifiesToUper", "h2.identifiesToUper");
      BigInteger bigInteger0 = ValueLong.MAX;
      dBSequence0.setIncrement(bigInteger0);
      BigInteger bigInteger1 = dBSequence0.getIncrementIfNotDefault();
      assertEquals(9.223372E18F, bigInteger1.floatValue(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("E|L", "E|L", "E|L");
      assertNotNull(dBSequence0);
      
      DBSequence dBSequence1 = new DBSequence("E|L", (DBSchema) null);
      boolean boolean0 = dBSequence0.isIdentical((DBObject) dBSequence1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("?Q{J3ytrz)", "?Q{J3ytrz)", "?Q{J3ytrz)");
      BigInteger bigInteger0 = dBSequence0.getMinValueIfNotDefault();
      assertNull(bigInteger0);
  }

  @Test
  public void test4()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("?Q{J3ytrz)", "?Q{J3ytrz)", "?Q{J3ytrz)");
      assertNotNull(dBSequence0);
      
      BigInteger bigInteger0 = dBSequence0.getIncrement();
      assertNotNull(bigInteger0);
      
      dBSequence0.setMinValue(bigInteger0);
      DBSequence dBSequence1 = new DBSequence("?Q{J3ytrz)", "?Q{J3ytrz)", "?Q{J3ytrz)");
      boolean boolean0 = dBSequence0.isIdentical((DBObject) dBSequence1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("?Q{J3ytrz)", "?Q{J3ytrz)", "?Q{J3ytrz)");
      dBSequence0.setMaxValue((BigInteger) null);
      assertEquals("?Q{J3ytrz)", dBSequence0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("?Q{J3ytrz)", "?Q{J3ytrz)", "?Q{J3ytrz)");
      dBSequence0.setStart((BigInteger) null);
      BigInteger bigInteger0 = dBSequence0.getStartIfNotDefault();
      assertNull(bigInteger0);
  }

  @Test
  public void test7()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("($1[V", "($1[V", "($1[V");
      BigInteger bigInteger0 = dBSequence0.getLastNumber();
      assertEquals(0, bigInteger0.byteValue());
  }

  @Test
  public void test8()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("($1[V", "($1[V", "($1[V");
      String string0 = dBSequence0.getCatalogName();
      assertEquals("($1[V", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("z", "z", "z");
      String string0 = dBSequence0.getSchemaName();
      assertEquals("z", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      BigInteger bigInteger0 = dBSequence0.getMaxValueIfNotDefault();
      assertNull(bigInteger0);
  }

  @Test
  public void test11()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      dBSequence0.setCache((Long) null);
      assertEquals("", dBSequence0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("Calling commit() in auto-commit mode is not allowed.", (DBSchema) null);
      assertNotNull(dBSequence0);
      
      String string0 = dBSequence0.dropDDL();
      assertNotNull(string0);
      assertEquals("drop sequence Calling commit() in auto-commit mode is not allowed.", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("t}s#vvq`XA~CY/", "t}s#vvq`XA~CY/", "t}s#vvq`XA~CY/");
      dBSequence0.setCycle((Boolean) false);
      assertEquals("t}s#vvq`XA~CY/", dBSequence0.getName());
  }

  @Test
  public void test14()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBSequence dBSequence0 = new DBSequence("", dBSchema0);
      assertEquals("drop sequence ", dBSequence0.dropDDL());
  }

  @Test
  public void test15()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("?Q{J3ytrz)", "?Q{J3ytrz)", "?Q{J3ytrz)");
      BigInteger bigInteger0 = dBSequence0.getStartIfNotDefault();
      assertNull(bigInteger0);
  }

  @Test
  public void test16()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      BigInteger bigInteger0 = dBSequence0.getIncrementIfNotDefault();
      assertNull(bigInteger0);
  }

  @Test
  public void test17()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("f", "f", "f");
      assertNotNull(dBSequence0);
      
      DBSequence dBSequence1 = new DBSequence("($14V", "($14V", "($14V");
      boolean boolean0 = dBSequence1.isIdentical((DBObject) dBSequence0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("t}s#vvq`XA~CY/", "t}s#vvq`XA~CY/", "t}s#vvq`XA~CY/");
      assertNotNull(dBSequence0);
      
      boolean boolean0 = dBSequence0.isIdentical((DBObject) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("?Q{J3ytrz)", "?Q{J3ytrz)", "?Q{J3ytrz)");
      assertNotNull(dBSequence0);
      
      DBSequence dBSequence1 = new DBSequence("?Q{J3ytrz)", "?Q{J3ytrz)", "?Q{J3ytrz)");
      dBSequence0.setStart((BigInteger) null);
      boolean boolean0 = dBSequence0.isIdentical((DBObject) dBSequence1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("E|L", "E|L", "E|L");
      assertNotNull(dBSequence0);
      
      DBSequence dBSequence1 = new DBSequence("E|L", (DBSchema) null);
      ValueBoolean valueBoolean0 = ValueBoolean.get(true);
      Boolean boolean0 = valueBoolean0.getBoolean();
      dBSequence0.setOrder(boolean0);
      boolean boolean1 = dBSequence0.isIdentical((DBObject) dBSequence1);
      assertEquals(false, boolean1);
  }
}
