/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDBUniqueConstraint {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[8");
      String[] stringArray0 = new String[47];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "[8", false, stringArray0);
      String string0 = dBUniqueConstraint0.toString();
      assertNotNull(string0);
      assertEquals("CONSTRAINT [8 UNIQUE (, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , )", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b(/");
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "b(/", true, stringArray0);
      dBPrimaryKeyConstraint0.addColumnName((String) null);
      assertEquals("CONSTRAINT b(/ PRIMARY KEY (, , , , , , , )", dBPrimaryKeyConstraint0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b(/");
      String[] stringArray0 = new String[8];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "b(/", true, stringArray0);
      dBUniqueConstraint0.addColumnName("b(/");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "b(/", true, stringArray0);
      boolean boolean0 = dBUniqueConstraint0.isIdentical((DBObject) dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT b(/ UNIQUE (, , , , , , , , b(/)", dBUniqueConstraint0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[8");
      String[] stringArray0 = new String[47];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "[8", false, stringArray0);
      boolean boolean0 = dBUniqueConstraint0.isIdentical((DBObject) null);
      assertEquals("CONSTRAINT [8 UNIQUE (, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , )", dBUniqueConstraint0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[8");
      String[] stringArray0 = new String[47];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "[8", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint((DBTable) defaultDBTable0, "[8", false, stringArray0);
      boolean boolean0 = dBUniqueConstraint0.isIdentical((DBObject) dBUniqueConstraint1);
      assertEquals("CONSTRAINT [8 UNIQUE (, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , )", dBUniqueConstraint0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b(/");
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "b(/", true, stringArray0);
      boolean boolean0 = dBPrimaryKeyConstraint0.isIdentical((DBObject) defaultDBTable0);
      assertEquals(false, boolean0);
  }
}
