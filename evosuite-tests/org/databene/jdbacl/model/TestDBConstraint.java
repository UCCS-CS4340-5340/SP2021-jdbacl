/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDBConstraint {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("cRKr*'>uQ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cRKr*'>uQ", dBSchema0);
      String[] stringArray0 = new String[15];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, (String) null, false, stringArray0);
      assertNotNull(dBUniqueConstraint0);
      
      dBUniqueConstraint0.addColumnName("cRKr*'>uQ");
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint((DBTable) defaultDBTable0, "cRKr*'>uQ", false, stringArray0);
      assertFalse(dBUniqueConstraint1.equals(dBUniqueConstraint0));
      assertNotNull(dBUniqueConstraint1);
      assertEquals(false, dBUniqueConstraint1.isNameDeterministic());
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, (String) null, true, stringArray0);
      boolean boolean0 = dBPrimaryKeyConstraint0.isNameDeterministic();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, (String) null, true, stringArray0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBPrimaryKeyConstraint0.getTable();
      assertEquals(true, dBPrimaryKeyConstraint0.isNameDeterministic());
      assertNotNull(defaultDBTable1);
  }

  @Test
  public void test3()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("cRKr*'>uQ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cRKr*'>uQ", dBSchema0);
      String[] stringArray0 = new String[15];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, (String) null, false, stringArray0);
      assertNotNull(dBUniqueConstraint0);
      
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint((DBTable) defaultDBTable0, (String) null, false, stringArray0);
      assertTrue(dBUniqueConstraint1.equals(dBUniqueConstraint0));
      assertEquals(false, dBUniqueConstraint1.isNameDeterministic());
      assertNotNull(dBUniqueConstraint1);
  }

  @Test
  public void test4()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("cRKr*'>uQ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cRKr*'>uQ", dBSchema0);
      String[] stringArray0 = new String[15];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, (String) null, false, stringArray0);
      assertNotNull(dBUniqueConstraint0);
      
      boolean boolean0 = dBUniqueConstraint0.equals((Object) null);
      assertEquals(false, dBUniqueConstraint0.isNameDeterministic());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, (String) null, true, stringArray0);
      boolean boolean0 = dBPrimaryKeyConstraint0.equals((Object) "UNIQUE");
      assertEquals(true, dBPrimaryKeyConstraint0.isNameDeterministic());
      assertEquals(false, boolean0);
  }
}
