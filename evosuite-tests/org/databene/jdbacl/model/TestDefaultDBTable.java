/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import org.databene.commons.AssertionError;
import org.databene.commons.ObjectNotFoundException;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDefaultDBTable {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.query("", (Connection) null);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * query
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = defaultDBTable0.countProviders();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      assertNull(defaultDBTable0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.addReferrer((DBTable) defaultDBTable0);
      assertEquals(0, defaultDBTable0.countProviders());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      List<DBCheckConstraint> list0 = defaultDBTable0.getCheckConstraints();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.allRows((Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.removeIndex((DBIndex) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      Collection<DBTable> collection0 = defaultDBTable0.getReferrers();
      assertEquals(true, collection0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "NV", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("NV", false, dBUniqueConstraint0);
      assertEquals("index", dBUniqueIndex0.getObjectType());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, (String) null, false, stringArray0);
      defaultDBTable0.removeUniqueConstraint((DBUniqueConstraint) dBPrimaryKeyConstraint0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try {
        defaultDBTable0.queryRowsByCellValues(stringArray0, (Object[]) stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      List<DBIndex> list0 = defaultDBTable0.getIndexes();
      assertEquals(0, list0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setDoc("Q0SY?-4R8~bIyP");
      assertEquals(0, defaultDBTable0.countProviders());
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.addCheckConstraint((DBCheckConstraint) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0|");
      // Undeclared exception!
      try {
        defaultDBTable0.getProvider(383);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 383, Size: 0
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.getRowCount((Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NV", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      defaultDBTable0.getForeignKeyConstraint(stringArray0);
      assertEquals(1, defaultDBTable0.countProviders());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.queryPKs((Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBIndex dBIndex0 = defaultDBTable0.getIndex("R4/MYTA14&");
      assertNull(dBIndex0);
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try {
        defaultDBTable0.queryRows("{|)Zrs!Yp,-6+u8c", (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = defaultDBTable0.getDoc();
      assertNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable1, "8", false, stringArray0);
      boolean boolean0 = defaultDBTable0.isIdentical((DBObject) defaultDBTable1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBDataType dBDataType0 = DBDataType.getInstance(2507, "=km!|pn*93l(FD");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=km!|pn*93l(FD", (DBTable) defaultDBTable0, dBDataType0);
      stringArray0[1] = "=km!|pn*93l(FD";
      stringArray0[0] = "=km!|pn*93l(FD";
      DBColumn[] dBColumnArray0 = defaultDBTable0.getColumns(stringArray0);
      assertNotNull(dBColumnArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try {
        defaultDBTable0.getColumns(stringArray0);
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Column 'null' not found in table 'null'
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      
      Set<DBUniqueConstraint> set0 = defaultDBTable0.getUniqueConstraints(false);
      assertNotNull(set0);
      assertEquals(0, set0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      Set<DBUniqueConstraint> set0 = defaultDBTable0.getUniqueConstraints(true);
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, (String) null, false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint(stringArray0);
      assertEquals("PRIMARY KEY (, , , , , , , , )", dBPrimaryKeyConstraint1.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "-km!|pn*A3l(FD", true, stringArray0);
      String[] stringArray1 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint(stringArray1);
      assertNull(dBPrimaryKeyConstraint1);
  }

  @Test
  public void test30()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "NV", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      assertNull(dBUniqueConstraint1.getDoc());
  }

  @Test
  public void test31()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      String[] stringArray0 = new String[6];
      String[] stringArray1 = defaultDBTable0.getColumnNames();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "NV", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray1);
      assertNull(dBUniqueConstraint1);
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "=km!|pn*93l(FD", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint("=km!|pn*93l(FD");
      assertEquals("unique constraint", dBPrimaryKeyConstraint1.getObjectType());
  }

  @Test
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "8", false, stringArray0);
      defaultDBTable0.addUniqueConstraint((DBUniqueConstraint) dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint("MuF@u*3N7'aw");
      assertNull(dBPrimaryKeyConstraint1);
  }

  @Test
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "-km!|pn*A3l(FD", true, stringArray0);
      String[] stringArray1 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "8", false, stringArray1);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint("-km!|pn*A3l(FD");
      assertEquals(true, dBUniqueConstraint1.isNameDeterministic());
  }

  @Test
  public void test35()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NV", true, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try {
        defaultDBTable0.getForeignKeyConstraint(stringArray1);
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Table 'NV' has no foreign key with the columns (, , , )
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNotNull(defaultDBTable0);
      
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "-km!|pn*A3l(FD", true, stringArray0);
      String[] stringArray1 = defaultDBTable0.getPKColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) defaultDBTable0, "", false, stringArray0);
      // Undeclared exception!
      try {
        defaultDBTable0.queryByPK((Object) "", (Connection) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1
         */
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      boolean boolean0 = defaultDBTable0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("NV");
      assertNotNull(defaultDBTable1);
      
      dBSchema0.removeTable((DBTable) defaultDBTable1);
      assertFalse(defaultDBTable1.equals(defaultDBTable0));
  }

  @Test
  public void test40()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      boolean boolean0 = defaultDBTable0.equals((Object) dBSchema0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("NV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NV", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("NV");
      assertFalse(defaultDBTable1.equals(defaultDBTable0));
      assertNotNull(defaultDBTable1);
      
      defaultDBTable1.setSchema(dBSchema0);
      dBSchema0.removeTable((DBTable) defaultDBTable1);
      assertTrue(defaultDBTable1.equals(defaultDBTable0));
  }
}
