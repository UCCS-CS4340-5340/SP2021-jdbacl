/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDBNotNullConstraint {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QUERY ");
      DBDataType dBDataType0 = DBDataType.getInstance(1534, "QUERY ");
      Integer integer0 = new Integer(1534);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("QUERY ", (DBTable) defaultDBTable0, dBDataType0, (Integer) 1534, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) defaultDBTable0, "QUERY ", false, "QUERY ");
      assertNotNull(dBNotNullConstraint0);
      
      String string0 = dBNotNullConstraint0.toString();
      assertNotNull(string0);
      assertEquals("DBNotNullConstraint[QUERY [QUERY ]]", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QUERY ");
      DBDataType dBDataType0 = DBDataType.getInstance(1534, "QUERY ");
      Integer integer0 = new Integer(1534);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("QUERY ", (DBTable) defaultDBTable0, dBDataType0, (Integer) 1534, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) defaultDBTable0, "QUERY ", false, "QUERY ");
      assertNotNull(dBNotNullConstraint0);
      
      boolean boolean0 = dBNotNullConstraint0.isIdentical((DBObject) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QUERY ");
      DBDataType dBDataType0 = DBDataType.getInstance(1534, "QUERY ");
      Integer integer0 = new Integer(1534);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("QUERY ", (DBTable) defaultDBTable0, dBDataType0, (Integer) 1534, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) defaultDBTable0, "QUERY ", false, "QUERY ");
      assertNotNull(dBNotNullConstraint0);
      
      boolean boolean0 = dBNotNullConstraint0.isIdentical((DBObject) defaultDBTable0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QUERY ");
      DBDataType dBDataType0 = DBDataType.getInstance(1534, "QUERY ");
      Integer integer0 = new Integer(1534);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("QUERY ", (DBTable) defaultDBTable0, dBDataType0, (Integer) 1534, integer0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) defaultDBTable0, "QUERY ", false, "QUERY ");
      assertNotNull(dBNotNullConstraint0);
      
      DBNotNullConstraint dBNotNullConstraint1 = new DBNotNullConstraint((DBTable) defaultDBTable0, "QUERY ", false, "QUERY ");
      boolean boolean0 = dBNotNullConstraint0.isIdentical((DBObject) dBNotNullConstraint1);
      assertEquals(true, boolean0);
  }
}
