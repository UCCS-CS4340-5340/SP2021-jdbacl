/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestTableContainer {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Hxg1=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      tableContainer0.removeTable((DBTable) defaultDBTable0);
      assertEquals("Hxg1=", tableContainer0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      TableContainer tableContainer1 = new TableContainer("", (CompositeDBObject<?>) tableContainer0);
      List<DBTable> list0 = tableContainer0.support.getTables(true);
      assertEquals(0, list0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      DBTable dBTable0 = tableContainer0.getTable("");
      assertNull(dBTable0);
  }

  @Test
  public void test3()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(" BA");
      // Undeclared exception!
      try {
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("9S0No2FZ&b");
      List<DBSequence> list0 = tableContainer0.getSequences(false);
      assertEquals(0, list0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Hxg1=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      tableContainer0.addTable((DBTable) defaultDBTable0);
      assertNull(defaultDBTable0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("9S0No2FZ&b");
      TableContainer tableContainer1 = new TableContainer("9S0No2FZ&b");
      boolean boolean0 = tableContainer0.isIdentical((DBObject) tableContainer1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      // Undeclared exception!
      try {
        tableContainer0.getSequences(true, (List<DBSequence>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      List<DBTable> list0 = tableContainer0.getTables(true);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      List<DBTable> list0 = tableContainer0.getTables();
      assertEquals(0, list0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("roK");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("roK");
      tableContainer0.setOwner((CompositeDBObject<?>) defaultDBTable0);
      DBSchema dBSchema0 = tableContainer0.getSchema();
      assertNull(dBSchema0);
  }

  @Test
  public void test11()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("roK");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("roK");
      DBSchema dBSchema0 = new DBSchema("roK");
      defaultDBTable0.setSchema(dBSchema0);
      tableContainer0.setOwner((CompositeDBObject<?>) defaultDBTable0);
      DBSchema dBSchema1 = tableContainer0.getSchema();
      assertNull(dBSchema1.getDoc());
  }
}
