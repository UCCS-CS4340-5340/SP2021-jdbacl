/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDefaultDBColumn {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2G>>#|`Xq", (DBTable) null, (-90), "2G>>#|`Xq");
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.setDefaultValue("2G>>#|`Xq");
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2G>>#|`Xq", (DBTable) null, (-90), "2G>>#|`Xq");
      assertNotNull(defaultDBColumn0);
      
      String string0 = defaultDBColumn0.toString();
      assertEquals("2G>>#|`Xq : 2G>>#|`XQ", string0);
      assertNotNull(string0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2G>>#|`Xq", (DBTable) null, (-90), "2G>>#|`Xq");
      assertNotNull(defaultDBColumn0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-90), "2G>>#|`Xq");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("2G>>#|`Xq", (DBTable) null, dBDataType0, (Integer) null, (Integer) (-90));
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) defaultDBColumn1);
      assertEquals("2G>>#|`Xq : 2G>>#|`XQ", defaultDBColumn1.toString());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1342), ":jJng'6f/V7[;fil");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":jJng'6f/V7[;fil", (DBTable) null, dBDataType0, (Integer) (-1342));
      assertNotNull(defaultDBColumn0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      
      defaultDBColumn0.setVersionColumn(true);
      assertEquals(true, defaultDBColumn0.isVersionColumn());
      assertEquals(":jJng'6f/V7[;fil : :JJNG'6F/V7[;FIL(-1342)", defaultDBColumn0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uYcyCe8+LYQkN*", (DBTable) defaultDBTable0, 17, "uYcyCe8+LYQkN*");
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.setFractionDigits((Integer) 17);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test5()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-6), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0);
      assertNotNull(defaultDBColumn0);
      
      List<DBUniqueConstraint> list0 = defaultDBColumn0.getUkConstraints();
      assertNotNull(list0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("u?|sMm^r?j2#S/n", (DBTable) defaultDBTable0, (-1), "u?|sMm^r?j2#S/n");
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.isVersionColumn();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uO`P<eu'b : UO`P<WU'B(13,072)", (DBTable) null, (-893), "uO`P<eu'b : UO`P<WU'B(13,072)");
      assertNotNull(defaultDBColumn0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uO`P<eu'b : UO`P<WU'B(13,072)");
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "uO`P<eu'b : UO`P<WU'B(13,072)", false, stringArray0);
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint0);
      boolean boolean0 = defaultDBColumn0.isUnique();
      assertEquals(true, defaultDBColumn0.isUnique());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2G>>#|`Xq", (DBTable) null, (-90), "2G>>#|`Xq");
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.getDefaultValue();
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("u?|sMm^r?j2#S/n", (DBTable) defaultDBTable0, (-1), "u?|sMm^r?j2#S/n");
      assertNotNull(defaultDBColumn0);
      
      DBDataType dBDataType0 = defaultDBColumn0.getType();
      assertNotNull(dBDataType0);
      
      defaultDBColumn0.setType(dBDataType0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(-1, dBDataType0.getJdbcType());
      assertEquals(true, dBDataType0.isAlpha());
  }

  @Test
  public void test10()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1342), ":jJng'6f/V7[;fil");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":jJng'6f/V7[;fil", (DBTable) null, dBDataType0, (Integer) (-1342));
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.getNotNullConstraint();
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(":jJng'6f/V7[;fil : :JJNG'6F/V7[;FIL(-1342)", defaultDBColumn0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) defaultDBTable0, dBDataType0, (Integer) 0, (Integer) 0);
      int int0 = defaultDBColumn0.hashCode();
      assertEquals(1188788, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) defaultDBTable0, 0, "");
      assertNotNull(defaultDBColumn0);
      assertEquals(true, defaultDBColumn0.isNullable());
      
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setNullable(false);
      assertEquals(false, defaultDBColumn0.isNullable());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uO`P<eu'b : UO`P<WU'B(13,072)", (DBTable) null, (-893), "uO`P<eu'b : UO`P<WU'B(13,072)");
      assertNotNull(defaultDBColumn0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uO`P<eu'b : UO`P<WU'B(13,072)");
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) defaultDBTable0, "uO`P<eu'b : UO`P<WU'B(13,072)", false, stringArray0);
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint0);
      assertEquals(true, defaultDBColumn0.isUnique());
      
      dBUniqueConstraint0.addColumnName("uO`P<eu'b : UO`P<WU'B(13,072)");
      boolean boolean0 = defaultDBColumn0.isUnique();
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1342), ":jJng'6f/V7[;fil");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":jJng'6f/V7[;fil", (DBTable) null, dBDataType0, (Integer) (-1342));
      assertNotNull(defaultDBColumn0);
      
      defaultDBColumn0.setNullable(true);
      assertEquals(":jJng'6f/V7[;fil : :JJNG'6F/V7[;FIL(-1342)", defaultDBColumn0.toString());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[7];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) defaultDBTable0, dBDataType0, (Integer) 0, (Integer) 0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBColumn0.getForeignKeyConstraint();
      assertNotNull(dBForeignKeyConstraint1);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[7];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, (DBTable) defaultDBTable0, stringArray0, (DBTable) defaultDBTable0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) defaultDBTable0, 0, "");
      assertNotNull(defaultDBColumn0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBColumn0.getForeignKeyConstraint();
      assertNull(dBForeignKeyConstraint1);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2G>>#|`Xq", (DBTable) null, (-90), "2G>>#|`Xq");
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.equals((Object) "2G>>#|`Xq : 2G>>#|`XQ");
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uYcyCe8+LYQkN*", (DBTable) defaultDBTable0, (-269), "uYcyCe8+LYQkN*");
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.equals((Object) defaultDBColumn0);
      assertEquals(true, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) defaultDBTable0, dBDataType0, (Integer) 0, (Integer) 0);
      boolean boolean0 = defaultDBColumn0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uYcyCe8+LYQkN*", (DBTable) defaultDBTable0, (-269), "uYcyCe8+LYQkN*");
      assertNotNull(defaultDBColumn0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("uYcyCe8+LYQkN*", (DBTable) defaultDBTable0, (DBDataType) null);
      boolean boolean0 = defaultDBColumn0.equals((Object) defaultDBColumn1);
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uYcyCe8+LYQkN*", (DBTable) defaultDBTable0, 17, "uYcyCe8+LYQkN*");
      assertNotNull(defaultDBColumn0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("check-claracter-normalizati+n", (DBTable) defaultDBTable0, (DBDataType) null, (Integer) 17);
      boolean boolean0 = defaultDBColumn0.equals((Object) defaultDBColumn1);
      assertEquals(false, defaultDBColumn1.isVersionColumn());
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) defaultDBTable0, 0, "");
      assertNotNull(defaultDBColumn0);
      assertEquals(true, defaultDBColumn0.isNullable());
      
      defaultDBColumn0.setNullable(false);
      String string0 = defaultDBColumn0.toString();
      assertEquals(false, defaultDBColumn0.isNullable());
      assertEquals(" :  NOT NULL", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2G>>#|`Xq", (DBTable) null, (-90), "2G>>#|`Xq");
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) null);
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":jJng6f/V7[;fil");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":jJng6f/V7[;fil", (DBTable) defaultDBTable0, (-909), ":jJng6f/V7[;fil");
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) defaultDBTable0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1342), ":jJng'6f/V7[;fil");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":jJng'6f/V7[;fil", (DBTable) null, dBDataType0, (Integer) (-1342));
      assertNotNull(defaultDBColumn0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("'Ni_D_I^0kH", (DBTable) null, dBDataType0, (Integer) (-1342));
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) defaultDBColumn1);
      assertEquals(false, boolean0);
      assertEquals(":jJng'6f/V7[;fil : :JJNG'6F/V7[;FIL(-1342)", defaultDBColumn0.toString());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uO`P<eu'b", (DBTable) null, 131088, "uO`P<eu'b");
      assertNotNull(defaultDBColumn0);
      
      DBDataType dBDataType0 = defaultDBColumn0.getType();
      assertNotNull(dBDataType0);
      
      defaultDBColumn0.setSize((Integer) 131088);
      Integer integer0 = new Integer(131088);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("uO`P<eu'b", (DBTable) null, dBDataType0, integer0);
      boolean boolean0 = defaultDBColumn1.isIdentical((DBObject) defaultDBColumn0);
      assertEquals("uO`P<eu'b : UO`P<EU'B(131088)", defaultDBColumn0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1342), ":jJng'6f/V7[;fil");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":jJng'6f/V7[;fil", (DBTable) null, dBDataType0, (Integer) (-1342));
      assertNotNull(defaultDBColumn0);
      
      boolean boolean0 = defaultDBColumn0.isEquivalent((DBObject) null);
      assertEquals(false, boolean0);
      assertEquals(":jJng'6f/V7[;fil : :JJNG'6F/V7[;FIL(-1342)", defaultDBColumn0.toString());
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("u?|sMm^r?j2#S/n", (DBTable) defaultDBTable0, (-1), "u?|sMm^r?j2#S/n");
      assertNotNull(defaultDBColumn0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      boolean boolean0 = defaultDBColumn0.isEquivalent((DBObject) dBCatalog0);
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uYcyCe8+LYQkN*", (DBTable) defaultDBTable0, 17, "uYcyCe8+LYQkN*");
      assertNotNull(defaultDBColumn0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("uYcyCe8+LYQkN*", (DBTable) defaultDBTable0, (DBDataType) null);
      boolean boolean0 = defaultDBColumn0.isIdentical((DBObject) defaultDBColumn1);
      assertEquals(false, boolean0);
      assertEquals(false, defaultDBColumn1.isVersionColumn());
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) defaultDBTable0, dBDataType0, (Integer) 0, (Integer) 0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) defaultDBTable0, 0, "");
      assertNotNull(defaultDBColumn1);
      
      boolean boolean0 = defaultDBColumn0.isEquivalent((DBObject) defaultDBColumn1);
      assertEquals(false, defaultDBColumn0.isVersionColumn());
      assertEquals(false, boolean0);
  }
}
