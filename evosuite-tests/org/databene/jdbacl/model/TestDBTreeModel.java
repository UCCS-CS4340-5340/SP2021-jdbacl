/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTreeModel;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDBTreeModel {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBTreeModel dBTreeModel0 = new DBTreeModel((CompositeDBObject<?>) dBCatalog0);
      // Undeclared exception!
      try {
        dBTreeModel0.getChild((DBObject) dBCatalog0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBTreeModel dBTreeModel0 = new DBTreeModel((CompositeDBObject<?>) defaultDBTable0);
      DBObject dBObject0 = dBTreeModel0.getParent((DBObject) defaultDBTable0);
      assertNull(dBObject0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBTreeModel dBTreeModel0 = new DBTreeModel((CompositeDBObject<?>) defaultDBTable0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBTreeModel0.getRoot();
      assertSame(defaultDBTable1, defaultDBTable0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBTreeModel dBTreeModel0 = new DBTreeModel((CompositeDBObject<?>) defaultDBTable0);
      int int0 = dBTreeModel0.getIndexOfChild((DBObject) defaultDBTable0, (DBObject) defaultDBTable0);
      assertEquals((-1), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("rIW^?}A4.0x~zL2IPZ");
      DBPackage dBPackage0 = new DBPackage("rIW^?}A4.0x~zL2IPZ", dBSchema0);
      TableContainer tableContainer0 = new TableContainer("rIW^?}A4.0x~zL2IPZ", (CompositeDBObject<?>) dBPackage0);
      DBTreeModel dBTreeModel0 = new DBTreeModel((CompositeDBObject<?>) tableContainer0);
      int int0 = dBTreeModel0.getChildCount((DBObject) dBPackage0);
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBTreeModel dBTreeModel0 = new DBTreeModel((CompositeDBObject<?>) dBCatalog0);
      boolean boolean0 = dBTreeModel0.isLeaf((DBObject) dBCatalog0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DBTreeModel dBTreeModel0 = new DBTreeModel((CompositeDBObject<?>) null);
      boolean boolean0 = dBTreeModel0.isLeaf((DBObject) null);
      assertEquals(true, boolean0);
  }
}
