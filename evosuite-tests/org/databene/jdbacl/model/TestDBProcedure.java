/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDBProcedure {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage((String) null, (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      String string0 = dBProcedure0.getOverload();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("E3`p#", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("E3`p#", dBPackage0);
      String string0 = dBProcedure0.getObjectId();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("E3`p#", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("E3`p#", dBPackage0);
      String string0 = dBProcedure0.getSubProgramId();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("BELONGS_TO_TABLE", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("BELONGS_TO_TABLE", dBPackage0);
      boolean boolean0 = dBProcedure0.isIdentical((DBObject) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage((String) null, (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      boolean boolean0 = dBProcedure0.isIdentical((DBObject) dBPackage0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("3>\neason: ");
      DBPackage dBPackage0 = new DBPackage("3>\neason: ", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("3>\neason: ", dBPackage0);
      DBProcedure dBProcedure1 = new DBProcedure("3>\neason: ", dBPackage0);
      dBProcedure1.setObjectId("3>\neason: ");
      boolean boolean0 = dBProcedure1.isIdentical((DBObject) dBProcedure0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("3>\neason: ");
      DBPackage dBPackage0 = new DBPackage("3>\neason: ", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("3>\neason: ", dBPackage0);
      DBProcedure dBProcedure1 = new DBProcedure("3>\neason: ", dBPackage0);
      dBProcedure1.setObjectId("3>\neason: ");
      dBProcedure0.setObjectId("3>\neason: ");
      dBProcedure1.setSubProgramId("3>\neason: ");
      boolean boolean0 = dBProcedure1.isIdentical((DBObject) dBProcedure0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("3>\neason: ");
      DBPackage dBPackage0 = new DBPackage("3>\neason: ", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("3>\neason: ", dBPackage0);
      DBProcedure dBProcedure1 = new DBProcedure("3>\neason: ", dBPackage0);
      dBProcedure1.setObjectId("3>\neason: ");
      dBProcedure0.setObjectId("3>\neason: ");
      dBProcedure1.setSubProgramId("3>\neason: ");
      dBProcedure1.setOverload("3>\neason: ");
      dBProcedure0.setSubProgramId("3>\neason: ");
      boolean boolean0 = dBProcedure1.isIdentical((DBObject) dBProcedure0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("3>\neason: ");
      DBPackage dBPackage0 = new DBPackage("3>\neason: ", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("3>\neason: ", dBPackage0);
      DBProcedure dBProcedure1 = new DBProcedure("3>\neason: ", dBPackage0);
      dBProcedure0.setOverload("3>\neason: ");
      dBProcedure1.setObjectId("3>\neason: ");
      dBProcedure0.setObjectId("3>\neason: ");
      dBProcedure1.setSubProgramId("3>\neason: ");
      dBProcedure1.setOverload("3>\neason: ");
      dBProcedure0.setSubProgramId("3>\neason: ");
      boolean boolean0 = dBProcedure1.isIdentical((DBObject) dBProcedure0);
      assertEquals(true, boolean0);
  }
}
