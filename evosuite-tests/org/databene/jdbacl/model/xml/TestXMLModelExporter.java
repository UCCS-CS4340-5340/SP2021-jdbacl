/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.SQLException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.xml.SimpleXMLWriter;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.xml.XMLModelExporter;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.xml.sax.SAXException;

@RunWith(EvoSuiteRunner.class)
public class TestXMLModelExporter {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = FileUtil.canonicalFile(":g9TIu]q//3[rS");
          XMLModelExporter xMLModelExporter0 = new XMLModelExporter(file0);
          VersionNumber versionNumber0 = VersionNumber.valueOf(":g9TIu]q//3[rS");
          DefaultDatabase defaultDatabase0 = new DefaultDatabase(":g9TIu]q//3[rS", ":g9TIu]q//3[rS", versionNumber0);
          // Undeclared exception!
          try {
            xMLModelExporter0.export((Database) defaultDatabase0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/mnt/fastdata/ac1gf/SF110/dist/13_jdbacl/:g9TIu]q/3[rS\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             * org.databene.jdbacl.model.xml.XMLModelExporter.export(XMLModelExporter.java:83)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = FileUtil.canonicalFile(":g9TIu]q//3[rS");
      XMLModelExporter xMLModelExporter0 = new XMLModelExporter(file0);
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted(":g9TIu]q//3[rS", ":g9TIu]q//3[rS", ":g9TIu]q//3[rS", true, ":g9TIu]q//3[rS");
      SimpleXMLWriter simpleXMLWriter0 = new SimpleXMLWriter((OutputStream) rowOutputTextQuoted0, ":g9TIu]q//3[rS", true);
      String[] stringArray0 = new String[10];
      xMLModelExporter0.writeColumnGroup(stringArray0, simpleXMLWriter0);
      assertNull(simpleXMLWriter0.getSystemId());
  }
}
