/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.databene.commons.ObjectNotFoundException;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDBCatalog {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.setName("");
      assertNull(dBCatalog0.getDoc());
  }

  @Test
  public void test1()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      // Undeclared exception!
      try {
        dBCatalog0.removeTable("");
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Table ''
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      assertNotNull(dBCatalog0);
      
      DBSchema dBSchema0 = new DBSchema("zN", dBCatalog0);
      assertNotNull(dBSchema0);
      
      DBSequence dBSequence0 = new DBSequence("zN", dBSchema0);
      assertNotNull(dBSequence0);
      
      List<DBSequence> list0 = dBCatalog0.getSequences();
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("#Y");
      dBCatalog0.setDoc("#Y");
      assertEquals("catalog", dBCatalog0.getObjectType());
  }

  @Test
  public void test4()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Database database0 = dBCatalog0.getDatabase();
      assertNull(database0);
  }

  @Test
  public void test5()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("#Y");
      String string0 = dBCatalog0.getDoc();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("#Y");
      DBSchema dBSchema0 = dBCatalog0.getSchema("; 2L\"");
      assertNull(dBSchema0);
  }

  @Test
  public void test7()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      DBSchema dBSchema0 = new DBSchema("");
      dBCatalog0.removeSchema(dBSchema0);
      assertNull(dBSchema0.getDoc());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("T", "T", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("T", (Database) defaultDatabase0);
      assertEquals("T", dBCatalog0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      assertNotNull(dBCatalog0);
      
      DBSchema dBSchema0 = new DBSchema("zN", dBCatalog0);
      assertNotNull(dBSchema0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zN", dBSchema0);
      List<DBTable> list0 = dBCatalog0.getTables();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("zN", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zN", dBSchema0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBCatalog0.getTable("catalog", false);
      assertNull(defaultDBTable1);
  }

  @Test
  public void test11()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("zN", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zN", dBSchema0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBCatalog0.getTable("zN");
      assertEquals("table", defaultDBTable1.getObjectType());
  }

  @Test
  public void test12()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("zN", dBCatalog0);
      List<DBSequence> list0 = dBCatalog0.getSequences();
      assertEquals(0, list0.size());
  }
}
