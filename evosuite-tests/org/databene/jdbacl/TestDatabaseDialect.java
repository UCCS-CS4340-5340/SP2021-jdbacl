/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import org.databene.jdbacl.ColumnInfo;
import org.databene.jdbacl.dialect.DB2Dialect;
import org.databene.jdbacl.dialect.Derby10_6Dialect;
import org.databene.jdbacl.dialect.DerbyDialect;
import org.databene.jdbacl.dialect.Firebird2_5Dialect;
import org.databene.jdbacl.dialect.FirebirdDialect;
import org.databene.jdbacl.dialect.HSQL2Dialect;
import org.databene.jdbacl.dialect.HSQLDialect;
import org.databene.jdbacl.dialect.OracleDialect;
import org.databene.jdbacl.dialect.PostgreSQLDialect;
import org.databene.jdbacl.dialect.SqlServerDialect;
import org.databene.jdbacl.dialect.UnknownDialect;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DefaultDBTable;
import org.firebirdsql.gds.XSQLVAR;
import org.h2.value.ValueLong;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDatabaseDialect {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DB2Dialect dB2Dialect0 = new DB2Dialect();
      dB2Dialect0.getSystem();
  }

  @Test
  public void test1()  throws Throwable  {
      UnknownDialect unknownDialect0 = new UnknownDialect("POWER(0, -1)");
      assertNotNull(unknownDialect0);
      
      // Undeclared exception!
      try {
        unknownDialect0.getSequence("POWER(0, -1)", (Connection) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Firebird2_5Dialect firebird2_5Dialect0 = new Firebird2_5Dialect();
      assertNotNull(firebird2_5Dialect0);
      
      firebird2_5Dialect0.queryPackages((DBSchema) null, (Connection) null);
      assertEquals(true, firebird2_5Dialect0.isSequenceSupported());
      assertEquals("firebird", firebird2_5Dialect0.getSystem());
  }

  @Test
  public void test3()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      assertNotNull(oracleDialect0);
      
      boolean boolean0 = oracleDialect0.isSequenceSupported();
      assertEquals(true, boolean0);
      assertEquals("oracle", oracleDialect0.getSystem());
  }

  @Test
  public void test4()  throws Throwable  {
      UnknownDialect unknownDialect0 = new UnknownDialect("&W/$");
      assertNotNull(unknownDialect0);
      
      boolean boolean0 = unknownDialect0.supportsRegex();
      assertEquals(false, boolean0);
      assertEquals("&W/$", unknownDialect0.getSystem());
      assertEquals(false, unknownDialect0.isSequenceBoundarySupported());
  }

  @Test
  public void test5()  throws Throwable  {
      DerbyDialect derbyDialect0 = new DerbyDialect(true);
      assertNotNull(derbyDialect0);
      
      // Undeclared exception!
      try {
        derbyDialect0.setNextSequenceValue("7#FkIJ7$Akts145>", 0L, (Connection) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * nextSequenceValue() not implemented
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DB2Dialect dB2Dialect0 = new DB2Dialect();
      assertNotNull(dB2Dialect0);
      
      // Undeclared exception!
      try {
        dB2Dialect0.regexQuery((String) null, true, (String) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * db2 does not support regular expressions
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DB2Dialect dB2Dialect0 = new DB2Dialect();
      assertNotNull(dB2Dialect0);
      
      dB2Dialect0.queryTriggers((DBSchema) null, (Connection) null);
      assertEquals("db2", dB2Dialect0.getSystem());
      assertEquals(true, dB2Dialect0.isSequenceSupported());
      assertEquals(true, dB2Dialect0.isSequenceBoundarySupported());
  }

  @Test
  public void test8()  throws Throwable  {
      DB2Dialect dB2Dialect0 = new DB2Dialect();
      assertNotNull(dB2Dialect0);
      
      String string0 = dB2Dialect0.sequenceNoCycle();
      assertEquals("NOCYCLE", string0);
      assertEquals(true, dB2Dialect0.isSequenceBoundarySupported());
      assertEquals("db2", dB2Dialect0.getSystem());
  }

  @Test
  public void test9()  throws Throwable  {
      UnknownDialect unknownDialect0 = new UnknownDialect("POWER(0, -1)");
      assertNotNull(unknownDialect0);
      
      String string0 = unknownDialect0.formatTimestamp((Timestamp) null);
      assertEquals("POWER(0, -1)", unknownDialect0.getSystem());
      assertEquals("'null'", string0);
      assertEquals(false, unknownDialect0.isSequenceSupported());
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      DerbyDialect derbyDialect0 = new DerbyDialect();
      assertNotNull(derbyDialect0);
      
      // Undeclared exception!
      try {
        derbyDialect0.createSequence("8.4", (-1607L), (Connection) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sequence not supported in derby
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      HSQL2Dialect hSQL2Dialect0 = new HSQL2Dialect();
      assertNotNull(hSQL2Dialect0);
      
      // Undeclared exception!
      try {
        hSQL2Dialect0.createSequence("@A bd>Za", 1L, (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = ValueLong.MAX;
      DBSequence dBSequence0 = new DBSequence("iFU=d3_KrYt8g&gIum]", "iFU=d3_KrYt8g&gIum]", "iFU=d3_KrYt8g&gIum]");
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      assertNotNull(hSQLDialect0);
      
      dBSequence0.setStart(bigInteger0);
      String string0 = hSQLDialect0.renderCreateSequence(dBSequence0);
      assertNotNull(string0);
      assertEquals("hsql", hSQLDialect0.getSystem());
      assertEquals("CREATE SEQUENCE iFU=d3_KrYt8g&gIum] START WITH 9223372036854775807", string0);
      assertEquals(true, hSQLDialect0.isSequenceBoundarySupported());
  }

  @Test
  public void test13()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      assertNotNull(sqlServerDialect0);
      
      DBSequence dBSequence0 = new DBSequence("'CHECK'", "'CHECK'", "'CHECK'");
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      dBSequence0.setIncrement(bigInteger0);
      String string0 = sqlServerDialect0.renderCreateSequence(dBSequence0);
      assertEquals("sql_server", sqlServerDialect0.getSystem());
      assertEquals(false, sqlServerDialect0.isSequenceSupported());
      assertNotNull(string0);
      assertEquals("CREATE SEQUENCE 'CHECK' INCREMENT BY 0", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("'CHECK'", "'CHECK'", "'CHECK'");
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      dBSequence0.setMaxValue(bigInteger0);
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      assertNotNull(hSQLDialect0);
      
      String string0 = hSQLDialect0.renderCreateSequence(dBSequence0);
      assertEquals("hsql", hSQLDialect0.getSystem());
      assertEquals(true, hSQLDialect0.isSequenceBoundarySupported());
      assertNotNull(string0);
      assertEquals("CREATE SEQUENCE 'CHECK' MAXVALUE 0", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = ValueLong.MAX;
      DBSequence dBSequence0 = new DBSequence("iFU=d3_KrYt8g&gIum]", "iFU=d3_KrYt8g&gIum]", "iFU=d3_KrYt8g&gIum]");
      dBSequence0.setMinValue(bigInteger0);
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      assertNotNull(hSQLDialect0);
      
      String string0 = hSQLDialect0.renderCreateSequence(dBSequence0);
      assertEquals("CREATE SEQUENCE iFU=d3_KrYt8g&gIum] MINVALUE 9223372036854775807", string0);
      assertEquals("hsql", hSQLDialect0.getSystem());
      assertNotNull(string0);
      assertEquals(true, hSQLDialect0.isSequenceBoundarySupported());
  }

  @Test
  public void test16()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("iFU=d3_KrYt8g&gIum]", "iFU=d3_KrYt8g&gIum]", "iFU=d3_KrYt8g&gIum]");
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      assertNotNull(hSQLDialect0);
      
      dBSequence0.setCycle((Boolean) true);
      String string0 = hSQLDialect0.renderCreateSequence(dBSequence0);
      assertEquals(true, hSQLDialect0.isSequenceBoundarySupported());
      assertEquals("hsql", hSQLDialect0.getSystem());
      assertEquals("CREATE SEQUENCE iFU=d3_KrYt8g&gIum] CYCLE", string0);
      assertNotNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      UnknownDialect unknownDialect0 = new UnknownDialect("@A bd>Za");
      assertNotNull(unknownDialect0);
      
      // Undeclared exception!
      try {
        unknownDialect0.setNextSequenceValue("@A bd>Za", 1L, (Connection) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sequence not supported in @A bd>Za
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      assertNotNull(sqlServerDialect0);
      
      // Undeclared exception!
      try {
        sqlServerDialect0.renderDropSequence((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Sequence not supported in sql_server
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      PostgreSQLDialect postgreSQLDialect0 = new PostgreSQLDialect();
      assertNotNull(postgreSQLDialect0);
      
      String string0 = postgreSQLDialect0.renderDropSequence("ine");
      assertEquals("postgres", postgreSQLDialect0.getSystem());
      assertNotNull(string0);
      assertEquals("drop sequence ine", string0);
      assertEquals(true, postgreSQLDialect0.isSequenceSupported());
  }

  @Test
  public void test20()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[3];
      FirebirdDialect firebirdDialect0 = new FirebirdDialect();
      assertNotNull(firebirdDialect0);
      
      // Undeclared exception!
      try {
        firebirdDialect0.update((DBTable) defaultDBTable0, stringArray0, (List<ColumnInfo>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Firebird2_5Dialect firebird2_5Dialect0 = new Firebird2_5Dialect();
      assertNotNull(firebird2_5Dialect0);
      
      String string0 = firebird2_5Dialect0.formatValue((Object) "CHECK");
      assertEquals(true, firebird2_5Dialect0.isSequenceSupported());
      assertEquals("'CHECK'", string0);
      assertNotNull(string0);
      assertEquals("firebird", firebird2_5Dialect0.getSystem());
  }

  @Test
  public void test22()  throws Throwable  {
      DB2Dialect dB2Dialect0 = new DB2Dialect();
      assertNotNull(dB2Dialect0);
      
      OracleDialect oracleDialect0 = new OracleDialect();
      String string0 = oracleDialect0.formatValue((Object) dB2Dialect0);
      assertNotNull(string0);
      assertEquals("oracle", oracleDialect0.getSystem());
      assertEquals(true, dB2Dialect0.isSequenceBoundarySupported());
      assertEquals("db2", dB2Dialect0.getSystem());
  }

  @Test
  public void test23()  throws Throwable  {
      HSQL2Dialect hSQL2Dialect0 = new HSQL2Dialect();
      assertNotNull(hSQL2Dialect0);
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Date date0 = xSQLVAR0.decodeDate((byte[]) null);
      String string0 = hSQL2Dialect0.formatValue((Object) date0);
      assertEquals(true, hSQL2Dialect0.isSequenceBoundarySupported());
      assertNotNull(string0);
      assertEquals("'0002-11-30'", string0);
      assertEquals("hsql", hSQL2Dialect0.getSystem());
  }

  @Test
  public void test24()  throws Throwable  {
      Derby10_6Dialect derby10_6Dialect0 = new Derby10_6Dialect();
      assertNotNull(derby10_6Dialect0);
      
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      // Undeclared exception!
      try {
        derby10_6Dialect0.insert((DBTable) defaultDBTable0, (List<ColumnInfo>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Firebird2_5Dialect firebird2_5Dialect0 = new Firebird2_5Dialect();
      assertNotNull(firebird2_5Dialect0);
      
      String[] stringArray0 = new String[8];
      String string0 = firebird2_5Dialect0.renderCase((String) null, (String) null, stringArray0);
      assertEquals("firebird", firebird2_5Dialect0.getSystem());
      assertNotNull(string0);
      assertEquals("CASE WHEN null THEN null WHEN null THEN null WHEN null THEN null WHEN null THEN null END", string0);
      assertEquals(true, firebird2_5Dialect0.isSequenceSupported());
  }

  @Test
  public void test26()  throws Throwable  {
      UnknownDialect unknownDialect0 = new UnknownDialect(".4");
      assertNotNull(unknownDialect0);
      
      String[] stringArray0 = new String[2];
      String string0 = unknownDialect0.renderCase(".4", ".4", stringArray0);
      assertEquals(".4", unknownDialect0.getSystem());
      assertNotNull(string0);
      assertEquals("CASE WHEN null THEN null ELSE .4 END AS .4", string0);
      assertEquals(false, unknownDialect0.isSequenceBoundarySupported());
  }
}
