/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.dialect;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import java.sql.SQLException;
import org.databene.jdbacl.dialect.HSQLDialect;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestHSQLDialect {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      hSQLDialect0.isDefaultSchema("SYS_FK_0", "SYS_FK_0");
  }

  @Test
  public void test1()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      String string0 = hSQLDialect0.renderFetchSequenceValue("-- session ");
      assertEquals("call next value for -- session ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      // Undeclared exception!
      try {
        hSQLDialect0.setNextSequenceValue("*IWWaksr?/", 464L, (Connection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.supportsRegex();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      String string0 = hSQLDialect0.renderDropSequence("F#{\"!p_! q1Wfeb");
      assertEquals("drop sequence F#{\"!p_! q1Wfeb", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDefaultCatalog("call next value for -- session ", "call next value for -- session ");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDefaultCatalog((String) null, "?#]t8kPW>Y");
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDeterministicPKName("SYS_IDX_SYS_0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDeterministicPKName("F#{\"!p_! q1Wfeb");
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDeterministicUKName("SYS_IDX_SYS_0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDeterministicUKName("?#]t8kPW>Y");
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDeterministicFKName("SYS_FK_0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDeterministicFKName("SYS_IDX_SYS_0");
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDeterministicIndexName("SYS_IDX_0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      HSQLDialect hSQLDialect0 = new HSQLDialect();
      boolean boolean0 = hSQLDialect0.isDeterministicIndexName("F#{\"!p_! q1Wfeb");
      assertEquals(true, boolean0);
  }
}
