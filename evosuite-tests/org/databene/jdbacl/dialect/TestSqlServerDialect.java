/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.dialect;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.databene.jdbacl.dialect.SqlServerDialect;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestSqlServerDialect {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      sqlServerDialect0.isDefaultCatalog("readStatusVector arg:isc_arg_gds int: ", "-n*`tTujZ");
  }

  @Test
  public void test1()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDefaultSchema("z+", "z+");
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDeterministicPKName("SYS_");
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDeterministicPKName("z+");
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDeterministicUKName("SYS_");
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDeterministicUKName("z+");
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDeterministicFKName("SYS_");
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDeterministicFKName("s");
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDeterministicIndexName("SYS_");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      boolean boolean0 = sqlServerDialect0.isDeterministicIndexName("s");
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String[] stringArray0 = new String[6];
      String string0 = sqlServerDialect0.renderCase("oPMb77auKjqaf@2", "", stringArray0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      String[] stringArray0 = new String[4];
      String string0 = sqlServerDialect0.renderCase("readStatusVector arg:isc_arg_gds int: ", "-n*`tTujZ", stringArray0);
      assertEquals("readStatusVector arg:isc_arg_gds int:  = CASE WHEN null THEN null WHEN null THEN null ELSE -n*`tTujZ END", string0);
      assertNotNull(string0);
  }
}
