/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.identity;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import org.databene.commons.iterator.TableRowIterator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.identity.IdentityModel;
import org.databene.jdbacl.identity.IdentityProvider;
import org.databene.jdbacl.identity.KeyMapper;
import org.databene.jdbacl.identity.UniqueKeyIdentity;
import org.databene.jdbacl.identity.mem.MemKeyMapper;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestUniqueKeyIdentity {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[22];
      UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity("Ygd", stringArray0);
      IdentityProvider identityProvider0 = new IdentityProvider();
      MemKeyMapper memKeyMapper0 = new MemKeyMapper((Connection) null, (String) null, (Connection) null, (String) null, identityProvider0, (Database) null);
      // Undeclared exception!
      try {
        memKeyMapper0.getTargetPK((IdentityModel) uniqueKeyIdentity0, "Ygd");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity("A9N%!M4u5Jr^xU><t", (String[]) null);
      String string0 = uniqueKeyIdentity0.getDescription();
      assertEquals("Identity definition by unique key: ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[8];
      UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity("BHeKG", stringArray0);
      UniqueKeyIdentity.ColumnToNkConverter uniqueKeyIdentity_ColumnToNkConverter0 = uniqueKeyIdentity0.new ColumnToNkConverter("BHeKG", (KeyMapper) null);
      UniqueKeyIdentity.UniqueKeyNkPkIterator uniqueKeyIdentity_UniqueKeyNkPkIterator0 = uniqueKeyIdentity0.new UniqueKeyNkPkIterator((TableRowIterator) null, uniqueKeyIdentity_ColumnToNkConverter0, stringArray0);
      String[] stringArray1 = uniqueKeyIdentity_UniqueKeyNkPkIterator0.getColumnLabels();
      assertNotSame(stringArray1, stringArray0);
      assertEquals("Identity definition by unique key: , , , , , , , ", uniqueKeyIdentity0.getDescription());
      assertNotNull(stringArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity("A9N%!M4u5Jr^xU><t", (String[]) null);
      IdentityProvider identityProvider0 = new IdentityProvider();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("A9N%!M4u5Jr^xU><t", "A9N%!M4u5Jr^xU><t", (VersionNumber) null);
      MemKeyMapper memKeyMapper0 = new MemKeyMapper((Connection) null, "A9N%!M4u5Jr^xU><t", (Connection) null, "A9N%!M4u5Jr^xU><t", identityProvider0, (Database) defaultDatabase0);
      UniqueKeyIdentity.ColumnToNkConverter uniqueKeyIdentity_ColumnToNkConverter0 = uniqueKeyIdentity0.new ColumnToNkConverter("A9N%!M4u5Jr^xU><t", (KeyMapper) memKeyMapper0);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[5];
      UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity("", stringArray0);
      String[] stringArray1 = new String[7];
      UniqueKeyIdentity.ColumnToNkConverter uniqueKeyIdentity_ColumnToNkConverter0 = uniqueKeyIdentity0.new ColumnToNkConverter((String) null, (KeyMapper) null);
      Object[] objectArray0 = uniqueKeyIdentity_ColumnToNkConverter0.convert((Object[]) stringArray1);
      assertNotNull(objectArray0);
      assertEquals("Identity definition by unique key: , , , , ", uniqueKeyIdentity0.getDescription());
  }
}
