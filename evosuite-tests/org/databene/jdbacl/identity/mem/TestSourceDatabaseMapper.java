/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.identity.mem;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import org.databene.commons.ObjectNotFoundException;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.identity.IdentityModel;
import org.databene.jdbacl.identity.IdentityProvider;
import org.databene.jdbacl.identity.KeyMapper;
import org.databene.jdbacl.identity.NaturalPkIdentity;
import org.databene.jdbacl.identity.NkPkQueryIdentity;
import org.databene.jdbacl.identity.SubNkPkQueryIdentity;
import org.databene.jdbacl.identity.mem.MemKeyMapper;
import org.databene.jdbacl.identity.mem.SourceDatabaseMapper;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDatabase;
import org.h2.engine.SessionRemote;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestSourceDatabaseMapper {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      Object object0 = sessionRemote0.getLobSyncObject();
      IdentityProvider identityProvider0 = new IdentityProvider();
      VersionNumber versionNumber0 = VersionNumber.valueOf("wXx5ZusqNSvjlr");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("wXx5ZusqNSvjlr", "wXx5ZusqNSvjlr", versionNumber0);
      MemKeyMapper memKeyMapper0 = new MemKeyMapper((Connection) null, "wXx5ZusqNSvjlr", (Connection) null, "wXx5ZusqNSvjlr", identityProvider0, (Database) defaultDatabase0);
      SourceDatabaseMapper sourceDatabaseMapper0 = new SourceDatabaseMapper((KeyMapper) memKeyMapper0, (Connection) null, "wXx5ZusqNSvjlr", (Database) defaultDatabase0);
      NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity("wXx5ZusqNSvjlr", "wXx5ZusqNSvjlr");
      sourceDatabaseMapper0.store((IdentityModel) nkPkQueryIdentity0, object0, "wXx5ZusqNSvjlr", object0);
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("wXx5ZusqNSvjlr");
      sourceDatabaseMapper0.getNaturalKey((IdentityModel) naturalPkIdentity0, object0);
  }

  @Test
  public void test1()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      Object object0 = sessionRemote0.getLobSyncObject();
      IdentityProvider identityProvider0 = new IdentityProvider();
      VersionNumber versionNumber0 = VersionNumber.valueOf("wXx5ZusqNSvjlr");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("wXx5ZusqNSvjlr", "wXx5ZusqNSvjlr", versionNumber0);
      MemKeyMapper memKeyMapper0 = new MemKeyMapper((Connection) null, "wXx5ZusqNSvjlr", (Connection) null, "wXx5ZusqNSvjlr", identityProvider0, (Database) defaultDatabase0);
      SourceDatabaseMapper sourceDatabaseMapper0 = new SourceDatabaseMapper((KeyMapper) memKeyMapper0, (Connection) null, "wXx5ZusqNSvjlr", (Database) defaultDatabase0);
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("wXx5ZusqNSvjlr");
      // Undeclared exception!
      try {
        sourceDatabaseMapper0.getNaturalKey((IdentityModel) naturalPkIdentity0, object0);
        fail("Expecting exception: ObjectNotFoundException");
      } catch(ObjectNotFoundException e) {
        /*
         * Table 'wXx5ZusqNSvjlr'
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      MemKeyMapper memKeyMapper0 = new MemKeyMapper((Connection) null, "Cf_e$9`n9.S", (Connection) null, "Cf_e$9`n9.S", (IdentityProvider) null, (Database) null);
      SourceDatabaseMapper sourceDatabaseMapper0 = new SourceDatabaseMapper((KeyMapper) memKeyMapper0, (Connection) null, "Cf_e$9`n9.S", (Database) null);
      String[] stringArray0 = new String[9];
      SubNkPkQueryIdentity subNkPkQueryIdentity0 = new SubNkPkQueryIdentity("Cf_e$9`n9.S", stringArray0, (IdentityProvider) null);
      // Undeclared exception!
      try {
        sourceDatabaseMapper0.getTargetPK((IdentityModel) subNkPkQueryIdentity0, (Object) "TABLE");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
