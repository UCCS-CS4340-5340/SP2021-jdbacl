/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl.identity;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.Connection;
import org.databene.commons.AssertionError;
import org.databene.jdbacl.identity.NaturalPkIdentity;
import org.databene.jdbacl.identity.NkPkQueryIdentity;
import org.databene.jdbacl.identity.NoIdentity;
import org.databene.jdbacl.identity.UniqueKeyIdentity;
import org.databene.jdbacl.model.DBRow;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DefaultDBTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestIdentityModel {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("");
      noIdentity0.handleNKNotFound("", "", "", "");
  }

  @Test
  public void test1()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity(":");
      assertNotNull(noIdentity0);
      
      String string0 = noIdentity0.toString();
      assertNotNull(string0);
      assertEquals("NoIdentity(:)", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("");
      assertNotNull(noIdentity0);
      
      // Undeclared exception!
      try {
        noIdentity0.query("", (Connection) null);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * query
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("x");
      assertNotNull(naturalPkIdentity0);
      
      naturalPkIdentity0.handleNonEquivalence("x", (Object) null, (DBRow) null);
      assertEquals("NaturalPkIdentity(x)", naturalPkIdentity0.toString());
      assertEquals("x identity by primary key", naturalPkIdentity0.getDescription());
  }

  @Test
  public void test4()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("x");
      assertNotNull(naturalPkIdentity0);
      
      Object[] objectArray0 = new Object[4];
      String string0 = naturalPkIdentity0.extractNK(objectArray0);
      assertNotNull(string0);
      assertEquals("x identity by primary key", naturalPkIdentity0.getDescription());
      assertEquals("NaturalPkIdentity(x)", naturalPkIdentity0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity(":");
      assertNotNull(noIdentity0);
      
      noIdentity0.addIrrelevantColumn("NoIdentity(:)");
      assertEquals("NoIdentity(:)", noIdentity0.toString());
      assertEquals("No identity defined for table :", noIdentity0.getDescription());
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[4];
      UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity("'}V,zp?G1", stringArray0);
      assertNotNull(uniqueKeyIdentity0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'}V,zp?G1");
      DBRow dBRow0 = new DBRow((DBTable) defaultDBTable0);
      uniqueKeyIdentity0.handleMissingOwner("'}V,zp?G1", dBRow0, (String) null, (Object) "'}V,zp?G1", (String) null);
      assertEquals("UniqueKeyIdentity('}V,zp?G1)", uniqueKeyIdentity0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("et4IHcM");
      assertNotNull(naturalPkIdentity0);
      
      String string0 = naturalPkIdentity0.getTableName();
      assertNotNull(string0);
      assertEquals("et4IHcM identity by primary key", naturalPkIdentity0.getDescription());
  }

  @Test
  public void test8()  throws Throwable  {
      NkPkQueryIdentity nkPkQueryIdentity0 = new NkPkQueryIdentity("et4IHcM", "et4IHcM");
      assertNotNull(nkPkQueryIdentity0);
      
      int int0 = nkPkQueryIdentity0.hashCode();
      assertEquals((-1480157042), int0);
  }

  @Test
  public void test9()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("et4IHcM");
      assertNotNull(naturalPkIdentity0);
      
      String string0 = naturalPkIdentity0.getName();
      assertNotNull(string0);
      assertEquals("NaturalPkIdentity(et4IHcM)", naturalPkIdentity0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("");
      assertNotNull(naturalPkIdentity0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try {
        naturalPkIdentity0.extractPK(objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
        /*
         * Table  does not have a primary key
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      UniqueKeyIdentity uniqueKeyIdentity0 = new UniqueKeyIdentity("et4IHcM", stringArray0);
      assertNotNull(uniqueKeyIdentity0);
      
      Object[] objectArray0 = new Object[2];
      uniqueKeyIdentity0.extractPK(objectArray0);
      assertEquals("UniqueKeyIdentity(et4IHcM)", uniqueKeyIdentity0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("7Do/-qG~e)@d$<6");
      assertNotNull(naturalPkIdentity0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = naturalPkIdentity0.extractPK(objectArray0);
      assertNotSame(objectArray0, object0);
      assertNotNull(object0);
      assertEquals("NaturalPkIdentity(7Do/-qG~e)@d$<6)", naturalPkIdentity0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("");
      assertNotNull(naturalPkIdentity0);
      
      boolean boolean0 = naturalPkIdentity0.equals((Object) "");
      assertEquals(false, boolean0);
      assertEquals("NaturalPkIdentity()", naturalPkIdentity0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      NoIdentity noIdentity0 = new NoIdentity("");
      assertNotNull(noIdentity0);
      
      boolean boolean0 = noIdentity0.equals((Object) noIdentity0);
      assertEquals(true, boolean0);
      assertEquals("NoIdentity()", noIdentity0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      NaturalPkIdentity naturalPkIdentity0 = new NaturalPkIdentity("x");
      assertNotNull(naturalPkIdentity0);
      
      boolean boolean0 = naturalPkIdentity0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals("x identity by primary key", naturalPkIdentity0.getDescription());
  }
}
