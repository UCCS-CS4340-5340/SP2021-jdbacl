/*
 * This file was automatically generated by EvoSuite
 */

package org.databene.jdbacl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.sql.ResultSet;
import org.databene.jdbacl.ResultSetDataIterator;
import org.databene.webdecs.DataContainer;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.h2.tools.SimpleRowSource;
import org.h2.value.ValueBytes;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestResultSetDataIterator {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      ResultSetDataIterator resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0, "nt implemented.");
      resultSetDataIterator0.getType();
  }

  @Test
  public void test1()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      byte[] byteArray0 = new byte[5];
      ValueBytes valueBytes0 = ValueBytes.getNoCopy(byteArray0);
      StringReader stringReader0 = (StringReader)valueBytes0.getReader();
      String[] stringArray0 = new String[5];
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)csv0.read((Reader) stringReader0, stringArray0);
      ResultSetDataIterator resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0, "mn<Q~YKLS}");
      assertNotNull(resultSetDataIterator0);
      
      String string0 = resultSetDataIterator0.toString();
      assertNotNull(string0);
      assertEquals("ResultSetDataIterator[mn<Q~YKLS}]", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      ResultSetDataIterator resultSetDataIterator0 = null;
      try {
        resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) null, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * resultSet is null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetDataIterator resultSetDataIterator0 = null;
      try {
        resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * query is empty
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetDataIterator resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0, "ii`PB aBZNDi3");
      resultSetDataIterator0.getColumnLabels();
      resultSetDataIterator0.getColumnLabels();
  }

  @Test
  public void test5()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      byte[] byteArray0 = new byte[5];
      ValueBytes valueBytes0 = ValueBytes.getNoCopy(byteArray0);
      StringReader stringReader0 = (StringReader)valueBytes0.getReader();
      String[] stringArray0 = new String[5];
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)csv0.read((Reader) stringReader0, stringArray0);
      ResultSetDataIterator resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0, "mn<Q~YKLS}");
      resultSetDataIterator0.getColumnLabels();
  }

  @Test
  public void test6()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      byte[] byteArray0 = new byte[5];
      ValueBytes valueBytes0 = ValueBytes.getNoCopy(byteArray0);
      StringReader stringReader0 = (StringReader)valueBytes0.getReader();
      String[] stringArray0 = new String[5];
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)csv0.read((Reader) stringReader0, stringArray0);
      ResultSetDataIterator resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0, "mn<Q~YKLS}");
      assertNotNull(resultSetDataIterator0);
      
      DataContainer<ResultSet> dataContainer0 = new DataContainer<ResultSet>((ResultSet) simpleResultSet0);
      DataContainer<ResultSet> dataContainer1 = resultSetDataIterator0.next(dataContainer0);
      assertEquals("ResultSetDataIterator[mn<Q~YKLS}]", resultSetDataIterator0.toString());
      assertNull(dataContainer1);
  }

  @Test
  public void test7()  throws Throwable  {
      DataContainer<ResultSet> dataContainer0 = new DataContainer<ResultSet>();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetDataIterator resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0, "(5N");
      assertNotNull(resultSetDataIterator0);
      
      resultSetDataIterator0.close();
      resultSetDataIterator0.next(dataContainer0);
      assertEquals("ResultSetDataIterator[(5N]", resultSetDataIterator0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      ResultSetDataIterator resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0, "nt implemented.");
      assertNotNull(resultSetDataIterator0);
      
      DataContainer<ResultSet> dataContainer0 = new DataContainer<ResultSet>();
      DataContainer<ResultSet> dataContainer1 = resultSetDataIterator0.next(dataContainer0);
      assertEquals("ResultSetDataIterator[nt implemented.]", resultSetDataIterator0.toString());
      assertNull(dataContainer1);
  }

  @Test
  public void test9()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) csv0);
      ResultSetDataIterator resultSetDataIterator0 = new ResultSetDataIterator((ResultSet) simpleResultSet0, "(5N");
      assertNotNull(resultSetDataIterator0);
      
      resultSetDataIterator0.close();
      resultSetDataIterator0.close();
      assertEquals("ResultSetDataIterator[(5N]", resultSetDataIterator0.toString());
  }
}
